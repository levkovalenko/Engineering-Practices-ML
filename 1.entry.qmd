---
title: "Engineering practices in ML"
author: "Lev Kovalenko"
format: 
    revealjs: 
        theme: dark
        self-contained: true
---

## Зачем этот курс?

- Познакомиться с повсеместными проблемами отрасли и их глубиной.

. . .

- Узнать их негативное влияние на разных уровнях (разработчик, команда, компания, индустрия).

. . .

- Изучить инструменты и практики позволяющие снизить это влияние.

. . .

- Поднять уровень компетенций в области ML.

## Почему такое название?

![](images/why_engeneers_practices.jpg){fig-align="center" height="100%"}

::: {.notes}
Современный data science и machine learning требуют написания большого количества кода. Прошли те дни когда все считалось на бумажках или в экселе. Теперь для разработки ML проектов требуется использование языков программирования общего пользования, библиотек и прочего. Собственно требуется "разработка ПО". А это область давно и хорошо изучена.
:::

## Инженерные практики в разработке ПО

- Test driven development
- Refactoring
- Design Improvement
- Continuous integration - continuous delivery
- Pair programming
- Automated tests

::: {.notes}
В области разработки ПО уже давно используются различные инженерные практики, общее принятые подходы для развития и увеличения производительности команды разработки ПО. Зачастую они упоминаются в различных agile методологиях, но на самом деле могут существовать отдельно. Применение таких практик позволяет поддерживать хорошее качество кода и архитектуры, быстрее поставлять новые фичи, повышать уровень развития команды. Собственно применение этих практик уже устоявшаяся вещь в индустрии разработки ПО. 
:::

# Что же с DS/ML?

> мы математики, нам это не надо

::: {.notes}
Зачастую именно так, в области анализа данных и машинного обучения такого нет. Связано это с тем, что в проектах DS/ML идёт исследование, результатом которого может быть подтверждение или опровержение гипотезы. И код не является важным артефактом, так как в дальнейшем не убдет использоваться. **НО** мало кто задумывается о том, что:

- Исследование должно быть воспроизводимо.
- Во время исследования вы пишите код, а значит что-то разрабатываете.

Поэтому мы соберем и изучим различные практики применимые в DS/ML. Этот курс направлен на то что бы осветить какие есть проблемы в отрасли и как их можно решить.
:::

## Какой план?

- Понимание проблематики
- Организация процесса в команде
- Инструменты воспроизводимости исследваоний

::: {.notes}
Собственно каков план на этот курс. Сегдня мы бдуем разбираться с проблематикой.
На следующих занятиях будем затрагивать темы организации процесса в команде
и инструменты необходимые для воспроизводимости исследваоний.
:::

## [I dont't like jupyter notebooks](https://docs.google.com/presentation/d/1biLS7GvqxVP_INvPQzzodMZFI6sSh70aCvFW4oh4pus/edit?usp=sharing)^[Первоисточник с конференции **jupytercon** - [видео](https://www.youtube.com/watch?v=7jiPeIFXb6U)] {.smaller}

- скрытые состояния, которые можно забыть или испортить
- возможность запускать код в произвольном порядке
- нет поддержки линтеров, форматеров и автокмплита
- не поддерживают модульность и переиспользование кода
- поощрают написание не тестируемого кода
- приходиться писать смешанный код
- не удобны для версионировани в гите
- нет requirements

**Резюме**: jupyter notebooks поощряют вредные привычки и плохие процессы, а также препятсвуют появлению хороших привычек.

::: aside
:::
