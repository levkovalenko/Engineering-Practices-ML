---
title: "Neptune.ai"
author: "Lev Kovalenko"
format: 
    revealjs: 
        theme: dark
        self-contained: true
        echo: true
        source: true
jupyter: "epml"
---

## {background-image="images/neptune.png" background-size="80%"}

::: {.notes}
Neptune — это хранилище метаданных машинного обучения, предназначенное для исследовательских групп, которые проводят множество экспериментов. Чувствуете, инструмент специально для DS. Вы можете складывать все данные, модели, графики, картинки, любые метаданные для DS.С помощью одной строки кода артефакты Neptune позволяют создавать версии наборов данных, моделей и других файлов с локального диска или любого хранилища, совместимого с S3.
:::

## Neptune components

- [neptune-client](https://github.com/neptune-ai/neptune-client){preview-link="true"}
- [app.neprune](https://app.neptune.ai/){preview-link="true"}

:::{.notes}
нептун-клиент– Клиентская библиотека Python (API), которую вы используете для регистрации и запроса метаданных построения модели. Поэтому установить его можно с помощью любого питоновского пакетного менеджера.

app.neptune.ai– веб-приложение для визуализации, сравнения, мониторинга и совместной работы.
:::

## Использование

```python
import neptune.new as neptune
from sklearn.datasets import load_wine
...

run = neptune.init_run()
data = load_wine()
X_train, X_test, y_train, y_test = train_test_split(...)

PARAMS = {"n_estimators": 10, "max_depth": 3, ...}
run["parameters"] = PARAMS

clf = RandomForestClassifier(**PARAMS)
...

test_f1_score = f1_score(y_test, y_test_pred.argmax(axis=1), average="macro")
run["test_f1"] = test_f1_score
run["model"].upload("model.pkl")
```

## Просмотре данных 

![](images/eptune_metadata.png){fig-align="center"}

## Анализ метаданных

![](images/neptune_dashboard.png){fig-align="center"}

## Что можно отслеживать

- Data
- Learning logs
- TF/Pytorch checkpoints
- Models
- Metadata
- Notebooks

::: {.notes}
Обычно вы будете создавать новую версию каждый раз, когда запускаете скрипт, выполняющий обучение модели, повторное обучение или анализ. E У вас зафиксируются данные, модели, метрики и графики полученные в ходе выполнения.

Реестр моделей позволяет управлять метаданными и жизненным циклом моделей отдельно от экспериментов.

Для каждой модели можно создавать и отслеживать версии модели. Для управления жизненным циклом модели вы можете отдельно контролировать этап каждой версии модели. Есть интеграция с экосистемами ML, и вы можете фиксировать в neptune промежуточные состояния моделей.

Для распространения результатов на команду вы можете хранить, например, последний набор данных проверки для вашей задачи машинного обучения в специально отведенном месте

С помощью расширения neptune-notebook вы можете делать снимки контрольных точек Jupyter Notebook и сравнивать их в специальном разделе приложения.
:::

## Ограничения

- Количество логов-часов
- Объем хранилища

::: {.notes}
В индивидуальном плане вы получаете месячную квоту в 200 часов мониторинга и лимит хранилища в 100 ГБ.

Если вы студент, профессор, участник конкурса Kaggle или исследователь, вы получите бесплатный доступ к нашей лицензии Neptune Team с увеличенным количеством часов регистрации в месяц.

Лог-часы учитываются таким образом, что если после отправки на сервер какой-то информации в течении 10 минут произойдет еще один запрос, то время записи логов будет потрачено на это время, собственно после этого следующее событие также должно произойти в течении 10 минут.
:::

# Pros&Cons

:::: {.columns}
 
::: {.column width="50%"}
**Pros**
 
- Self-hosted версия
- Любые данные
- Подробная документация
- Анализ метаданных
- Есть live-tracking обучения
- Переиспользуемо в прод
- Интегрируемо с разными Фреймворками
 
:::
 
::: {.column width="50%"}
**Cons**
 
- Требует специальное приложение neptune.ai
- Внесение изменений в код
- Не git-like инструмент
- Не тривиальная колоборативная работа
 
:::
::::
