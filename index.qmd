---
title: "Engineering practices in ML"
---
 
# Формальные моменты
 
Для удобства коммуникаций предлагаю общаться в [Telegram](https://t.me/+Q0o6NKCzfBMyYTNi).
 
## Как получить зачет?
 
$$0.4\cdot\text{ДЗ} + 0.4\cdot\text{ФП} + 0.2\cdot\text{Т}$$
 
ДЗ - домашние задания.
 
ФП - финальная презентация.
 
Т - Теоретический вопрос.
 
[Сводная таблица](https://docs.google.com/spreadsheets/d/19q918r42OZUjoH0GKmVDOaNjKuC5YHIygtasJkLpRcs/edit?usp=sharing) будет обновляться.
 
 
## Домашнее задание #1
 
- Выбрать и опубликовать ML проект на GitHub.
- Перевести все jupyter notebook’и в скрипты (если это уже существующий проект, можете оставить jupyter notebook, но также создайте папку со скриптами).
- Заполнить информацию о себе в [сводной таблице](https://docs.google.com/spreadsheets/d/19q918r42OZUjoH0GKmVDOaNjKuC5YHIygtasJkLpRcs/edit?usp=sharing)
 
Для тех, у кого нет своего проекта, советуем ознакомиться со следующими исследованиями, которые вы можете взять в качестве своего проекта, либо же составить свое исследование на их основе:
 
- [A Statistical Analysis & ML workflow of Titanic](https://www.kaggle.com/code/masumrumi/a-statistical-analysis-ml-workflow-of-titanic/notebook)
- [Titanic: A complete approach for Data Scientists](https://www.kaggle.com/code/pedrodematos/titanic-a-complete-approach-for-data-scientists/notebook)
- [Titanic - Advanced Feature Engineering Tutorial](https://www.kaggle.com/code/gunesevitan/titanic-advanced-feature-engineering-tutorial/notebook)
- [Exploratory Tutorial - Titanic](https://www.kaggle.com/code/arthurlu/exploratory-tutorial-titanic/notebook)
 
 
Данное домашнее задание оценивается на 10 баллов, если оно сделано в срок. За каждый день опоздания в сдаче $-1$ от исходной оценки.
**Дедлайн 15.11.2022.**

## Домашнее задание #2

- Выбрать пакетный менеджер.
- Сохранить зависимости в поддерживаемом формате. (*2 балла*)
- Разделить dev и prod зависимости. (*2 балла*)
- Настроить сборку пакета и публикацию в [pypi-test](https://test.pypi.org/). (*2 балла*)
- Описать шаги в `readme.md`: (*4 балла*)
    - установка пакетного менеджера.
    - развертывание окружения.
    - сборка пакета.
    - ссылка на пакет в pypi-test.
    - установка пакета из pypi-test.

Результатом работы будет добавление файлов зависимостей в репозиторий, а также описания.
Если в проект не будет добавлено файлов, то оценить его не представляется возможным.
**Дедлайн 22.11.2022.**


## Домашнее задание #3

- Отформатировать код с помощью `isort` и `black`/`autopep8`/`yapf`.
- Выбрать набор плагинов для `flake8` (от 5 штук).
- Записать выбранные формтеры, линтеры и плагины в `readme.md`. (*1 балла*)
- Зафиксировать настройки форматера и линтера в `pyproject.toml` или `setup.cfg` (*1 балла*)
- Настроить и добавить pre-commit в проект. (*1 балла*)
- Провести анализ кода с помощью flake8 и плагинов и зафиксировать проблемы в файле `linting.md` (*1 балла*)
- Провести рефакторинг выявленных проблем. (*3 балла*)
- Написать плагин для одной из проблем кода, опубликовать его и добавить в зависимости (*3 балла*)
    - Отсутсвие type hint в сигнатуре методов и функций.
    - Использование циклов для обработки матричных операци pandas и numpy.
    - Сокращенные названия переменных и одного, двух или трех символов.
    - Использование цикла, там где можно использовать listcomprehension.
    - Создание переменных в глобальной области.
    - Pandas view assign вместо использования `.loc`.
    - Использование тренарного оператора в тренарном операторе.


Результатом работы будет добавлением файла со списком выявленных проблем, описанием используемых линтеров,
внесение изенений в код (рефакторинг) и добавление ссылки на репозиторий своего линтера.
Если в проект не будет добавлено файлов, то оценить его не представляется возможным.
**Дедлайн 29.11.2022.**

## Домашнее задание #4

- Выбрать инструмент для версионирования данных.
- Подключить к нему публичное хранилище данных.
- Добавить данные в него и начать их версионировать.
- Добавить модели и полученные метрики в него.


Результатом добавление кода/файлов для использования системы контроля данных
Данное домашнее задание оценивается на 10 баллов, если оно сделано в срок.
За каждый день опоздания в сдаче $-1$ от исходной оценки.
**Дедлайн 06.12.2022.**


## Домашнее задание #5

- Выбрать инструмент для посстроения пайплайнов:
    - Make
    - Snakemake
    - DVC
    - Airflow
- Реализовать CLI для своих экспериментов (3 балла)
- Описать dag для вашего пайплайна обучения (4 балла)
- Прописать в readme как запускать ваш пайплайн (3 балла)


Результатом добавление кода/файлов для использования системы контроля данных. Данное домашнее задание оценивается на 10 баллов, если оно сделано в срок.
За каждый день опоздания в сдаче $-1$ от исходной оценки.
**Дедлайн 18.12.2022.**

## Вопросы к зачету

1) В чем заключается кризис воспроизводимости? Какие бывают причины не воспроизводимости исследваония? 
2) Правила проведения воспроизводимых исследваоний. Как они помогают дотичь воспроизводимости?
3) Какие общие артефакты у команды исследвоателей? Как организовать рабочий процесс в команде?
4) Как проблемы решает управление зависимостями? Какие есть наилучшие практики dependecy management?
5) Что такое docker? Как он может пригодиться DS исследвоателю?
6) Зачем в DS преокте поддерживать codestyle? Какие есть инстурменты для этого?
7) Что такое версионирование данных? Какие проблемы оно позволяет решть?
8) По каким параметрам можно сравнить два инстурмента контроля версий? Привидите пример такого сравнения.
9) В чем разница между пространственным хранением версий данных и git-like? Какие достоинства и недостатки есть у каждого из них.
10) Какие задачи решают workflow managers? Каким образом можно сравнивать такие инстурменты? Привидите пример сравнения.
11) Как писать отчет по преокту?